= class JSON::State < Object
alias JSON::Ext::Generator::State

Ruby オブジェクトから JSON 形式の文字列を生成する間、
JSON 形式の文字列を生成するための設定を保持しておくために使用するクラスです。

== Singleton Methods

--- new(options = {}) -> JSON::State

自身を初期化します。

@param options ハッシュを指定します。
       指定可能なオプションは以下の通りです。

: :indent
  インデントに使用する文字列を指定します。デフォルトは空文字列です。
: :space
  JSON 形式の文字列のトークン間に挿入する文字列を指定します。デフォルトは空文字列です。
: :space_before
  JSON 形式の文字列中で JavaScript のオブジェクトを表す部分にある ':' の
  前に挿入する文字列をセットします。デフォルトは空文字列です。
: :object_nl
  JSON 形式の文字列中に現れる JavaScript のオブジェクトの行末に挿入する文字列を指定します。
  デフォルトは空文字列です。
: :array_nl
  JSON 形式の文字列中に現れる JavaScript の配列の行末に挿入する文字列を指定します。
  デフォルトは空文字列です。
: :check_circular
  真を指定した場合、生成するオブジェクトの循環をチェックします。
  この動作がデフォルトです。
: :allow_nan
  真を指定した場合、[[m:JSON::NaN]], [[m:JSON::Infinity]],
  [[m:JSON::MinusInfinity]] を生成することを許すようになります。
  偽を指定した場合、これらの値を生成しようとすると例外が発生します。
  デフォルトは偽です。
: :ascii_only
  真を指定した場合、ASCII 文字列のみを用いて JSON 形式の文字列を生成します。
  デフォルトは偽です。
: :buffer_initial_length
  sets the initial length of the generator's internal buffer.

#@samplecode 例 Hash を指定
require "json"

json_state = JSON::State.new(indent: "\t")
json_state.class  # => JSON::Ext::Generator::State
json_state.indent # => "\t"
#@end

#@samplecode 例 JSON::State を指定
require "json"

json_state = JSON::State.new(indent: "\t")
copy = JSON::State.new(json_state)
copy.class  # => JSON::Ext::Generator::State
copy.indent # => "\t"
#@end

--- from_state(options) -> JSON::State

与えられた options によって生成した [[c:JSON::State]] のインスタンスを返します。

@param options [[c:JSON::State]] のインスタンスか、ハッシュを指定します。

@return options がハッシュである場合は、それによって初期化した [[c:JSON::State]] を
        返します。options が [[c:JSON::State]] のインスタンスである場合は単に
        options を返します。いずれでも無い場合は、何も設定されていない [[c:JSON::State]] の
        インスタンスを返します。

#@samplecode 例 Hash を指定
require "json"

json_state = JSON::State.from_state(indent: "\t")
json_state.class  # => JSON::Ext::Generator::State
json_state.indent # => "\t"
#@end

#@samplecode 例 JSON::State を指定
require "json"

json_state = JSON::State.from_state(indent: "\t")
# JSON を出力する何らかの処理を実行する
copy = JSON::State.from_state(json_state)
copy.class  # => JSON::Ext::Generator::State
copy.indent # => "\t"
#@end

== Public Instance Methods

--- allow_nan? -> bool

NaN, Infinity, -Infinity を生成できる場合、真を返します。
そうでない場合は偽を返します。

#@samplecode 例
require "json"

json_state = JSON::State.new({})
json_state.allow_nan? # => false
json_state = JSON::State.new(allow_nan: true)
json_state.allow_nan? # => true
#@end

@see [[rfc:4627]]

--- array_nl -> String

JSON の配列の後に出力する文字列を返します。

#@samplecode 例
require "json"

json_state = JSON::State.new({})
json_state.array_nl # => ""
json_state = JSON::State.new(array_nl: "\n")
json_state.array_nl # => "\n"
#@end

--- array_nl=(str)

JSON の配列の後に出力する文字列をセットします。

#@samplecode 例
require "json"

json_state = JSON::State.new({})
json_state.array_nl        # => ""
json_state.array_nl = "\n"
json_state.array_nl        # => "\n"
#@end

--- check_circular? -> bool

循環参照のチェックを行う場合は、真を返します。
そうでない場合は偽を返します。

#@samplecode 例 ネストをチェックするケース
require "json"

a = [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
s = JSON.state.new
begin
  JSON.generate(a, s)
rescue JSON::NestingError => e
  [e, s.max_nesting, s.check_circular?] # => [#<JSON::NestingError: nesting of 100 is too deep>, 100, true]
end
#@end

#@samplecode 例 ネストをチェックしないケース
require "json"

a = [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
s2 = JSON.state.new(max_nesting: 0)
json = JSON.generate(a, s2)
[json, s2.max_nesting, s2.check_circular?] # => ["[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", 0, false]
#@end

--- configure(options = {}) -> self
--- merge(options = {})     -> self

与えられたハッシュで自身を設定します。

オプションで使用するハッシュのキーについては [[m:JSON::State.new]] を参照してください。

@param options このオブジェクトの設定をするためのハッシュを指定します。

#@samplecode 例
require "json"

json_state = JSON::State.new(indent: "\t")
json_state.indent # => "\t"
JSON.generate({key1: "value1", key2: "value2"}, json_state)
# => "{\t\"key1\":\"value1\",\t\"key2\":\"value2\"}"

json_state.configure(indent: "  ")
json_state.indent # => "  "
JSON.generate({key1: "value1", key2: "value2"}, json_state)
# => "{  \"key1\":\"value1\",  \"key2\":\"value2\"}"
#@end

@see [[m:JSON::State.new]]

--- indent -> String

インデントに使用する文字列を返します。

#@samplecode 例
require "json"

json_state = JSON::State.new(indent: "\t")
json_state.indent # => "\t"
JSON.generate({key1: "value1", key2: "value2"}, json_state)
# => "{\t\"key1\":\"value1\",\t\"key2\":\"value2\"}"
#@end

--- indent=(string)

インデントに使用する文字列をセットします。

@param string インデントに使用する文字列を指定します。

#@samplecode 例
require "json"

json_state = JSON::State.new(indent: "\t")
json_state.indent # => "\t"
JSON.generate({key1: "value1", key2: "value2"}, json_state)
# => "{\t\"key1\":\"value1\",\t\"key2\":\"value2\"}"
json_state.indent = "  "
JSON.generate({key1: "value1", key2: "value2"}, json_state)
# => "{  \"key1\":\"value1\",  \"key2\":\"value2\"}"
#@end

--- max_nesting -> Integer

生成される JSON 形式の文字列のネストの深さの最大値を返します。

この値がゼロである場合は、ネストの深さのチェックを行いません。

#@samplecode 例 ネストの深さチェックを行う
require "json"

json_state = JSON::State.new(max_nesting: 2)
json_state.max_nesting            # => 2
JSON.generate([[]], json_state)
JSON.generate([[[]]], json_state) # => JSON::NestingError
#@end

#@samplecode 例 ネストの深さチェックを行わない
require "json"

json_state = JSON::State.new(max_nesting: 0)
json_state.max_nesting            # => 0
JSON.generate([[[[[[[[[[]]]]]]]]]], json_state)
#@end

--- max_nesting=(depth)

生成される JSON 形式の文字列のネストの深さの最大値をセットします。

この値にゼロをセットすると、ネストの深さのチェックを行いません。

#@samplecode 例
require "json"

json_state = JSON::State.new(max_nesting: 2)
json_state.max_nesting            # => 2
JSON.generate([[]], json_state)
json_state.max_nesting = 3
json_state.max_nesting            # => 3
JSON.generate([[[[]]]], json_state) # => JSON::NestingError
#@end

--- object_nl -> String

JSON 形式の文字列中に現れる JavaScript のオブジェクトの行末に挿入する文字列を返します。

#@samplecode 例
require "json"

json_state = JSON::State.new(object_nl: "")
json_state.object_nl             # => ""
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => [1,2,{"name":"tanaka","age":19}]

json_state = JSON::State.new(object_nl: "\n")
json_state.object_nl             # => "\n"
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)

# => [1,2,{
#    "name":"tanaka",
#    "age":19
#    }]
#@end

--- object_nl=(string)

JSON 形式の文字列中に現れる JavaScript のオブジェクトの行末に挿入する文字列をセットします。

@param string JSON 形式の文字列中に現れる JavaScript のオブジェクトの行末に挿入する文字列を指定します。

#@samplecode 例
require "json"

json_state = JSON::State.new(object_nl: "")
json_state.object_nl             # => ""
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => [1,2,{"name":"tanaka","age":19}]

json_state.object_nl = "\n"
json_state.object_nl             # => "\n"
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
 # => [1,2,{
#    "name":"tanaka",
#    "age":19
#    }]
#@end

--- space -> String

JSON 形式の文字列のトークン間に挿入する文字列を返します。

#@samplecode 例
require "json"

json_state = JSON::State.new(space: "")
json_state.space             # => ""
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => [1,2,{"name":"tanaka","age":19}]

json_state = JSON::State.new(space: "\t")
json_state.space             # => "\t"
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => [1,2,{"name":  "tanaka","age": 19}]
#@end

--- space=(string)

JSON 形式の文字列のトークン間に挿入する文字列をセットします。

@param string JSON 形式の文字列のトークン間に挿入する文字列を指定します。

#@samplecode 例
require "json"

json_state = JSON::State.new(space: "")
json_state.space             # => ""
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => [1,2,{"name":"tanaka","age":19}]

json_state.space = "\t"
json_state.space             # => "\t"
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => [1,2,{"name":  "tanaka","age": 19}]
#@end

--- space_before -> String

JSON 形式の文字列中で JavaScript のオブジェクトを表す部分にある ':' の
前に挿入する文字列を返します。

#@samplecode 例
require "json"

json_state = JSON::State.new(space_before: "")
json_state.space_before             # => ""
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => [1,2,{"name":"tanaka","age":19}]

json_state = JSON::State.new(space_before: " ")
json_state.space_before             # => " "
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => [1,2,{"name" :"tanaka","age" :19}]
#@end

--- space_before=(string)

JSON 形式の文字列中で JavaScript のオブジェクトを表す部分にある ':' の
前に挿入する文字列をセットします。

@param string JSON 形式の文字列中で JavaScript のオブジェクトを表す部分にある ':' の
              前に挿入する文字列をセットします。

#@samplecode 例
require "json"

json_state = JSON::State.new(space_before: "")
json_state.space_before             # => ""
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => [1,2,{"name":"tanaka","age":19}]

json_state.space_before = " "
json_state.space_before             # => " "
puts JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => [1,2,{"name" :"tanaka","age" :19}]
#@end

--- to_h    -> Hash
--- to_hash -> Hash

自身をハッシュに変換します。

#@samplecode 例
require "json"
require "pp"

json_state = JSON::State.new
pp json_state.to_h

# => {:indent=>"",
#     :space=>"",
#     :space_before=>"",
#     :object_nl=>"",
#     :array_nl=>"",
#     :allow_nan=>false,
#     :ascii_only=>false,
#     :max_nesting=>100,
#     :depth=>0,
#     :buffer_initial_length=>1024}
#@end

--- ascii_only? -> bool

ASCII 文字列のみを用いて JSON 形式の文字列を生成する場合に真を返します。
そうでない場合に偽を返します。

--- quirks_mode? -> bool
--- quirks_mode  -> bool

Returns true, if quirks mode is enabled. Otherwise returns false.

--- quirks_mode=(enable)

If set to true, enables the quirks_mode mode.

--- depth -> Integer

This integer returns the current depth of data structure nesting.

--- depth=(depth)

This sets the maximum level of data structure nesting in the generated
JSON to the integer depth, max_nesting = 0 if no maximum should be
checked.

--- buffer_initial_length -> Integer

This integer returns the current initial length of the buffer.

--- buffer_initial_length=(length)

This sets the initial length of the buffer to length, if length > 0,
otherwise its value isn't changed.

--- [](name) -> object

Return the value returned by method name.

--- []=(name, value)

Set the attribute name to value.

--- generate(obj) -> String

Generates a valid JSON document from object obj and returns the
result. If no valid JSON document can be created this method raises a
GeneratorError exception.
