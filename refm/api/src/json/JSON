= module JSON

JSON (JavaScript Object Notation) を扱うためのモジュールです。

== Singleton Methods

--- [](object, options) -> object

文字列のように扱えるデータを受け取った場合は Ruby のオブジェクトに変換して返します。
そうでない場合は JSON に変換して返します。

@param object 任意のオブジェクト指定可能です。

@param options [[m:JSON.#parse]], [[m:JSON.#generate]] の説明を参照してください。

#@samplecode 例
require "json"
string=<<JSON
{ "a":1, "b":2, "c":3 }
JSON
hash = { a: 1, b: 2, c: 3 }

JSON[string].class                   # => Hash
JSON[string]                         # => {"a"=>1, "b"=>2, "c"=>3}
JSON[string, symbolize_names: true]  # => {:a=>1, :b=>2, :c=>3}
JSON[hash].class                     # => String
JSON[hash]                           # => "{\"a\":1,\"b\":2,\"c\":3}"
#@end

@see [[m:JSON.#parse]], [[m:JSON.#generate]]

--- create_id -> String

json_create メソッドで使用するクラスを決定するために使用する値を返します。

デフォルトは "json_class" です。

#@samplecode 例
require "json"

class User
  attr :id, :name
  def initialize(id, name)
    @id, @name = id, name
  end

  def self.json_create(object)
    new(object['id'], object["name"])
  end

  def as_json(*)
    {
      JSON.create_id => self.class.name,
      "id" => id,
      "name" => name,
    }
  end

  def to_json(*)
    as_json.to_json
  end
end

json = JSON.generate(User.new(1, "tanaka"))
json # => "{\"json_class\":\"User\",\"id\":1,\"name\":\"tanaka\"}"
JSON.parse(json, create_additions: true)
# => #<User:0x0000557709b269e0 @id=1, @name="tanaka">
#@end

--- create_id=(identifier)

json_create メソッドで使用するクラスを決定するために使用する値をセットします。

@param identifier 識別子を指定します。

#@samplecode 例
require "json"
require "json/add/core"

JSON.create_id                   # => "json_class"
puts (1..5).to_json              # => {"json_class":"Range","a":[1,5,false]}
JSON.create_id = "my_json_class" # => "my_json_class"
JSON.create_id                   # => "my_json_class"
puts (1..5).to_json              # => {"my_json_class":"Range","a":[1,5,false]}
#@end

#@# nodoc
#@# --- deep_const_get

--- generator -> JSON::Ext::Generator

JSON ライブラリがジェネレータとして使用するモジュールを返します。

#@#noexample

#@# nodoc
#@# --- generator=(generator)

--- parser -> JSON::Ext::Parser

JSON ライブラリがパーサとして使用するクラスを返します。

#@samplecode 例
require "json"

JSON.parser   # => JSON::Ext::Parser
#@end

#@# nodoc
#@# --- parser=(parser)

--- state -> JSON::Ext::Generator::State

JSON ライブラリがジェネレータの状態を表すクラスとして使用するクラスを返します。

#@samplecode 例
require "json"

JSON.state   # => JSON::Ext::Generator::State
#@end

#@# 他のメソッドから考えると nodoc のはず。
#@# --- state=(state)


== Module Functions

--- dump(object, io = nil, limit = nil) -> String | IO

与えられたオブジェクトを JSON 形式の文字列に変換してダンプします。

与えられたオブジェクトを引数として [[m:JSON.#generate]] を呼び出します。


@param object ダンプするオブジェクトを指定します。

@param io  [[c:IO]] のように write メソッドを実装しているオブジェクトを指定します。

@param limit 指定した場合、limit 段以上深くリンクしたオブジェクトをダンプできません。

@raise ArgumentError オブジェクトのネストの深さが limit を越えた場合に発生します。

#@samplecode 例
require "json"

JSON.dump({ name: "tanaka", age: 19 }) # => "{\"name\":\"tanaka\",\"age\":19}"
#@end

#@samplecode 例
require "json"

File.open("test.txt", "w") do |f|
  JSON.dump([[[[[[[[[[]]]]]]]]]], f, 10)   # => #<File:test.txt>
  JSON.dump([[[[[[[[[[[]]]]]]]]]]], f, 10) # => exceed depth limit (ArgumentError)
end
#@end

@see [[c:Marshal]], [[m:Marshal.#dump]]

--- fast_generate(object) -> String
--- fast_unparse(object) -> String

与えられたオブジェクトを一行の JSON 形式の文字列に変換して返します。

このメソッドは循環参照のチェックを無効にしています。また、
[[m:JSON::NaN]], [[m:JSON::Infinity]], [[m:JSON::MinusInfinity]] を生成することがあります。
このため容易に無限ループを発生させることができるので、気をつけてください。

fast_unparse は将来削除される予定です。

@param object JSON 形式の文字列に変換するオブジェクトを指定します。

#@samplecode 例
require "json"

JSON.fast_generate({ name: "tanaka", age: 19 }) # => "{\"name\":\"tanaka\",\"age\":19}"
#@end

--- generate(object, state = nil) -> String
--- unparse(object, state = nil) -> String

与えられたオブジェクトを一行の JSON 形式の文字列に変換して返します。

デフォルトでは、サイズが最小となる JSON 形式の文字列を生成します。
また、循環参照のチェックを行います。[[m:JSON::NaN]], [[m:JSON::Infinity]],
[[m:JSON::MinusInfinity]] を生成することもありません。

unparse は将来削除される予定です。

@param object JSON 形式の文字列に変換するオブジェクトを指定します。

@param state [[c:JSON::State]] または、to_hash や to_h メソッドでハッシュに変換可能なオブジェクトを指定できます。
       ハッシュを使用する場合指定可能なオプションは以下の通りです。

: :indent
  インデントに使用する文字列を指定します。デフォルトは空文字列です。
: :space
  a string that is put after, a : or , delimiter (default: '')
: :space_before
  a string that is put before a : pair delimiter (default: '')
: :object_nl
  a string that is put at the end of a JSON object (default: '')
: :array_nl
  a string that is put at the end of a JSON array (default: '')
: :check_circular
  真を指定した場合、生成するオブジェクトの循環をチェックします。
  この動作がデフォルトです。
: :allow_nan
  真を指定した場合、[[m:JSON::NaN]], [[m:JSON::Infinity]],
  [[m:JSON::MinusInfinity]] を生成することを許すようになります。
  偽を指定した場合、これらの値を生成しようとすると例外が発生します。
  デフォルトは偽です。
: :max_nesting
  入れ子になっているデータの最大の深さを指定します。
  偽を指定すると深さのチェックを行いません。デフォルトは 19 です。

@raise JSON::GeneratorError [[m:JSON::NaN]], [[m:JSON::Infinity]],[[m:JSON::MinusInfinity]]
       を生成しようとした場合に発生します。

@raise JSON::CircularDatastructure 与えられたオブジェクトが循環参照を持つ場合に発生します。

#@samplecode 例
require "json"

JSON.generate([1, 2, { name: "tanaka", age: 19 }])
# => "[1,2,{\"name\":\"tanaka\",\"age\":19}]"
json_state = JSON::State.new(space: " ")
JSON.generate([1, 2, { name: "tanaka", age: 19 }], json_state)
# => "[1,2,{\"name\": \"tanaka\",\"age\": 19}]"
#@end

@see [[c:JSON::State]], [[m:JSON.#pretty_generate]]

--- load(source, proc = nil, options = {}) -> object
--- restore(source, proc = nil, options = {}) -> object

与えられた JSON 形式の文字列を Ruby オブジェクトとしてロードして返します。

proc として手続きオブジェクトが与えられた場合は、読み込んだオブジェクトを
引数にその手続きを呼び出します。


  require 'json'
  
  str=<<JSON
  [1,2,3]
  JSON
  
  JSON.load(str) # => [1,2,3]
  JSON.load(str, proc{|v| p v }) # => [1,2,3]
  # 以下が表示される
  # 1
  # 2
  # 3
  # [1,2,3]
  
  str=<<JSON
  { "a":1, "b":2, "c":3 }
  JSON
  
  JSON.load(str) # => {"a"=>1, "b"=>2, "c"=>3}
  JSON.load(str, proc{|v| p v }) # => {"a"=>1, "b"=>2, "c"=>3}
  # 以下が表示される
  # "a"
  # 1
  # "b"
  # 2
  # "c"
  # 3
  # {"a"=>1, "b"=>2, "c"=>3}

@param source JSON 形式の文字列を指定します。他には、to_str, to_io, read メソッドを持つオブジェクトも指定可能です。

@param proc [[c:Proc]] オブジェクトを指定します。

@param options オプションをハッシュで指定します。指定可能なオプションは以下の通りです。

: :max_nesting
  入れ子になっているデータの最大の深さを指定します。
  偽を指定すると深さのチェックを行いません。デフォルトは偽です。
: :allow_nan
  真を指定した場合、[[m:JSON::NaN]], [[m:JSON::Infinity]],
  [[m:JSON::MinusInfinity]] を生成することを許すようになります。
  偽を指定した場合、これらの値を生成しようとすると例外が発生します。デフォルトは真です。
#@if (version <= "2.3.0")
: :quirks_mode
  真を指定するとパース時に単一のJSON値を受け入れます。デフォルトは真です。このモードは2.4.0からは削除され、常にパース時に単一のJSON値を受け入れる形になりました。
#@end
#@if (version >= "2.4.0")
: :allow_blank
  真を指定すると、sourceがnilの場合にnilを返します。デフォルトは真です。
#@end
: :create_additions
  偽を指定するとマッチするクラスや [[m:JSON.create_id]] が見つかっても付加情報を生成しません。
  デフォルトは真です。
: :symbolize_names
  真を指定するとハッシュのキーを文字列ではなくシンボルにします。デフォルトは偽です。

--- load_file(filespec, opts = {}) -> object

filespec で指定した JSON 形式のファイルを Ruby オブジェクトとしてロードして返します。

@param filespec ファイル名を指定します。

@param options オプションをハッシュで指定します。指定可能なオプションは [[m:JSON.#parse]] と同様です。

@see [[m:JSON.#parse]]

--- load_file!(filespec, opts = {}) -> object

filespec で指定した JSON 形式のファイルを Ruby オブジェクトとしてロードして返します。

@param filespec ファイル名を指定します。

@param options オプションをハッシュで指定します。指定可能なオプションは [[m:JSON.#parse!]] と同様です。

@see [[m:JSON.#parse!]]

--- parse(source, options = {}) -> object

与えられた JSON 形式の文字列を Ruby オブジェクトに変換して返します。

@param source JSON 形式の文字列を指定します。

@param options オプションをハッシュで指定します。
       指定可能なオプションは以下の通りです。

: :max_nesting
  入れ子になっているデータの最大の深さを指定します。
  偽を指定すると深さのチェックを行いません。デフォルトは 19 です。
: :allow_nan
  真を指定すると [[rfc:4627]] を無視してパース時に [[m:JSON::NaN]], [[m:JSON::Infinity]],
  [[m:JSON::MinusInfinity]] を許可するようになります。デフォルトは偽です。
: :create_additions
  偽を指定するとマッチするクラスや [[m:JSON.create_id]] が見つかっても付加情報を生成しません。
  デフォルトは偽です。
: :symbolize_names
  真を指定するとハッシュのキーを文字列ではなくシンボルにします。デフォルトは偽です。

#@samplecode 例
require "json"

JSON.parse('[1,2,{"name":"tanaka","age":19}]')
# => [1, 2, {"name"=>"tanaka", "age"=>19}]

JSON.parse('[1,2,{"name":"tanaka","age":19}]', symbolize_names: true)
# => [1, 2, {:name=>"tanaka", :age=>19}]
#@end

@see [[m:JSON::Parser#parse]]

--- parse!(source, options = {}) -> object

与えられた JSON 形式の文字列を Ruby オブジェクトに変換して返します。

[[m:JSON.#parse]] よりも危険なデフォルト値が指定されているので
信頼できる文字列のみを入力として使用するようにしてください。

@param source JSON 形式の文字列を指定します。

@param options オプションをハッシュで指定します。
       指定可能なオプションは以下の通りです。

: :max_nesting
  入れ子になっているデータの最大の深さを指定します。
  数値を指定すると深さのチェックを行います。偽を指定すると深さのチェックを行いません。
  デフォルトは偽です。
: :allow_nan
  真を指定すると [[rfc:4627]] を無視してパース時に [[m:JSON::NaN]], [[m:JSON::Infinity]],
  [[m:JSON::MinusInfinity]] を許可するようになります。デフォルトは真です。
: :create_additions
  偽を指定するとマッチするクラスや [[m:JSON.create_id]] が見つかっても付加情報を生成しません。
  デフォルトは偽です。

#@samplecode 例
require "json"

json_text = "[1,2,{\"name\":\"tanaka\",\"age\":19}, NaN]"
JSON.parse!(json_text)
# => [1, 2, {"name"=>"tanaka", "age"=>19}, NaN]

JSON.parse!(json_text, symbolize_names: true)
# => [1, 2, {:name=>"tanaka", :age=>19}, NaN]

JSON.parse(json_text) # => unexpected token at 'NaN]' (JSON::ParserError)
#@end

@see [[m:JSON::Parser#parse]]

--- pretty_generate(object, options = nil) -> String
--- pretty_unparse(object, options = nil) -> String

Ruby のオブジェクトを JSON 形式の文字列に変換して返します。

このメソッドは [[m:JSON.#generate]] よりも人間に読みやすい文字列を返します。

pretty_unparse は将来削除される予定です。

@param object JSON 形式の文字列に変換するオブジェクトを指定します。

@param options [[c:JSON::State]] または、to_hash や to_h メソッドでハッシュに変換可能なオブジェクトを指定できます。
       ハッシュを使用する場合指定可能なオプションは [[m:JSON.#generate]] を参照してください。

#@samplecode 例
require "json"

hash = { "name": "tanaka", "age": 19 }
puts JSON.generate(hash)
# => {"name":"tanaka","age":19}

puts JSON.pretty_generate(hash)
# => {
#      "name": "tanaka",
#      "age": 19
#    }

puts JSON.pretty_generate(hash, space: "\t")
# => {
#      "name":  "tanaka",
#      "age": 19
#    }
#@end

@see [[m:JSON.#generate]]

#@# nodoc?
#@# --- recurse_proc(result, &proc) -> object


== Constants

--- VARIANT_BINARY -> bool

拡張ライブラリ版を使用している場合に真を返します。
そうでない場合は偽を返します。

--- JSON::VERSION -> String

このライブラリのバージョンを表す文字列です。

#@# nodoc
#@# --- JSON::VERSION_ARRAY -> Array
#@# 
#@# --- JSON::VERSION_BUILD -> Fixnum
#@# 
#@# --- JSON::VERSION_MAJOR -> Fixnum
#@# 
#@# --- JSON::VERSION_MINOR -> Fixnum
#@#

--- Infinity -> Float

正の無限大を表します。

@see [[c:Float]]

--- MinusInfinity -> Float

負の無限大を表します。

@see [[c:Float]]

--- NaN -> Float

NaN (Not a Number) を表します。

@see [[c:Float]]

--- JSON_LOADED -> bool

JSON ライブラリがロード済みである場合に真を返します。
そうでない場合は偽を返します。


= class JSON::JSONError < StandardError

JSON のエラーのための基底クラスです。

= class JSON::ParserError < JSON::JSONError

JSON のパースエラーを通知する例外です。

= class JSON::GeneratorError < JSON::JSONError
alias JSON::UnparserError

JSON 形式の文字列を生成するときに発生したエラーを通知する例外です。

= class JSON::CircularDatastructure < JSON::GeneratorError

JSON 形式の文字列を生成するときに循環するデータ構造があるときに発生する例外です。

= class JSON::MissingUnicodeSupport < JSON::JSONError

要求されたユニコードサポートがシステムにインストールされていない場合に発生する例外です。
通常、これは [[lib:iconv]] がインストールされていないことを意味します。

= class JSON::NestingError < JSON::ParserError

パースしようとしているデータ構造のネストが深すぎる場合に発生する例外です。






