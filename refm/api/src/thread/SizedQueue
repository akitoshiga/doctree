#@since 2.1.0
= class Thread::SizedQueue < Thread::Queue
alias SizedQueue

サイズの最大値を指定できる [[c:Thread::Queue]] です。
#@else
= class SizedQueue < Queue

サイズの最大値を指定できる [[c:Queue]] です。
#@end

=== 例

[[ruby-list:283]] より。q をサイズ 1 の SizedQueue オブジェクトに
することによって、入力される行と出力される行が同じ順序になります。
q = [] にすると入力と違った順序で行が出力されます。

  require 'thread'

  q = SizedQueue.new(1)

  th = Thread.start {
    while line = q.pop
      print line
    end
  }

  while l = gets
    q.push(l)
  end
  q.push(l)

  th.join

== Class Methods

#@since 2.1.0
--- new(max) -> Thread::SizedQueue
Thread::SizedQueue オブジェクトを生成します。
#@else
--- new(max) -> SizedQueue
SizedQueue オブジェクトを生成します。
#@end

@param max キューのサイズの最大値です。

#@#noexample 要約の例を参照

== Instance Methods

--- max -> Integer
キューの最大サイズを返します。

#@samplecode 例
q = SizedQueue.new(4)
q.max # => 4
#@end

--- max=(n)
キューの最大サイズを設定します。

@param n キューの最大サイズを指定します。

#@samplecode 例
#@until 2.3.0
require 'thread'
#@end
q = SizedQueue.new(4)
q.max # => 4
q.max = 5
q.max # => 5
#@end

#@since 2.2.0
--- push(obj, non_block = false) -> ()
--- enq(obj, non_block = false)  -> ()
--- <<(obj)                      -> ()
#@else
--- push(obj) -> ()
--- <<(obj)   -> ()
--- enq(obj)  -> ()
#@end

キューに与えられたオブジェクトを追加します。

#@since 2.1.0
キューのサイズが [[m:Thread::SizedQueue#max]] に達している場合は、
#@since 2.2.0
non_block が真でなければ、キューのサイズが [[m:Thread::SizedQueue#max]]
より小さくなるまで他のスレッドに実行を譲ります。
#@else
キューのサイズが [[m:Thread::SizedQueue#max]] より小さくなるまで他のスレッドに実行を譲ります。
#@end
その後、キューに与えられたオブジェクトを追加します。

@param obj キューに追加したいオブジェクトを指定します。
#@since 2.2.0
@param non_block true を与えると、キューが一杯の時に例外 [[c:ThreadError]] が発生します。
#@end

#@#noexample 要約の例を参照
@see  [[m:Thread::Queue#push]]
#@else
キューのサイズが [[m:SizedQueue#max]] に達している場合は、
キューのサイズが [[m:SizedQueue#max]] より小さくなるまで他のスレッドに実行を譲ります。
その後、キューに与えられたオブジェクトを追加します。

@param obj キューに追加したいオブジェクトを指定します。

#@#noexample 要約の例を参照
@see  [[m:Queue#push]]
#@end

--- pop(non_block = false)   -> object
--- shift(non_block = false) -> object
--- deq(non_block = false)   -> object

キューからひとつ値を取り出します。
キューに push しようと待っているスレッドがあれば、実行を再開させます。

@param non_block true を与えると、キューが空の時に例外 [[c:ThreadError]] が発生します。

#@samplecode 例
require 'thread'

q = SizedQueue.new(4)

th1 = Thread.start do
  while resource = q.pop
    puts resource
  end
end

[:resource1, :resource2, :resource3, nil].each{|r|
  q.push(r)
}

th1.join
# => resource1
# resource2
# resource3
#@end

#@samplecode 例: nonblock = true
require 'thread'

q = SizedQueue.new(4)

th1 = Thread.start do
  while resource = q.pop
    puts resource
  end
end

[:resource1, :resource2, :resource3, nil].each{|r|
  q.push(r)
}

begin
  th1.join
  q.pop(true)
rescue => e
  p e
  p e.message
end

# => resource1
# resource2
# resource3
# => #<ThreadError: queue empty>
# => "queue empty"
#@end

#@since 2.1.0
@see [[m:Thread::Queue#pop]]
#@else
@see [[m:Queue#pop]]
#@end

#@since 2.3.0
--- close -> self

キューを close します。詳しくは [[m:Thread::Queue#close]] を参照してください。

[[c:Thread::Queue]] とはキューにオブジェクトを追加するスレッドの動作が
異なります。キューにオブジェクトを追加するスレッドを待機している場合は
[[c:ClosedQueueError]] が発生して中断されます。

#@samplecode 例
q = SizedQueue.new(4)

[:resource1, :resource2, :resource3, nil].each { |r| q.push(r) }

q.closed? # => false
q.close
q.closed? # => true
#@end

@see [[m:Thread::Queue#close]]
#@end
#@since 2.5.0
--- empty? -> bool

キューが空の時、真を返します。

--- length -> Integer
--- size -> Integer

キューの長さを返します。
#@end
