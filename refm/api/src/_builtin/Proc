= class Proc < Object

ブロックをコンテキスト(ローカル変数のスコープやスタックフ
レーム)とともにオブジェクト化した手続きオブジェクトです。

Proc は ローカル変数のスコープを導入しないことを除いて
名前のない関数のように使えます。ダイナミックローカル変数は
Proc ローカルの変数として使えます。

Proc がローカル変数のスコープを保持していることは以下の例で
変数 var を参照できていることからわかります。

#@samplecode 例
var = 1
$foo = Proc.new { var }
var = 2

def foo
  $foo.call
end

p foo       # => 2
#@end

#@include(lambda_proc)

== Class Methods

#@until 3.0
--- new -> Proc
#@end
--- new { ... } -> Proc

ブロックをコンテキストとともにオブジェクト化して返します。

#@until 3.0
ブロックを指定しない場合、Ruby 2.7 では
[[m:$VERBOSE]] = true のときには警告メッセージ
「warning: Capturing the given block using Proc.new is deprecated; use `&block` instead」
が出力され、Ruby 3.0 では
[[c:ArgumentError]] (tried to create Proc object without a block)
が発生します。

ブロックを指定しなければ、このメソッドを呼び出したメソッドが
ブロックを伴うときに、それを Proc オブジェクトとして生成して返します。

ただし、ブロックを指定しない呼び出しは推奨されていません。呼び出し元のメソッドで指定されたブロック
を得たい場合は明示的に & 引数でうけるべきです。

@raise ArgumentError スタック上にブロックがないのにブロックを省略した呼び出しを行ったときに発生します。

#@samplecode 例
def foo
  pr = Proc.new
  pr.call(1)
end
foo {|arg| p arg }
# => 1
#@end

これは以下と同じです。

#@samplecode 例
def foo
  yield(1)
end
foo {|arg| p arg }
# => 1
#@end

呼び出し元のメソッドがブロックを伴わなければ、例外
[[c:ArgumentError]] が発生します。

#@samplecode 例
def foo
  Proc.new
end
foo
# => -:2:in `new': tried to create Proc object without a block (ArgumentError)
#        from -:2:in `foo'
#        from -:4:in `<main>'
#@end
#@else
@raise ArgumentError ブロックを省略した呼び出しを行ったときに発生します。

#@samplecode
pr = Proc.new {|arg| p arg }
pr.call(1) # => 1
#@end

#@samplecode
Proc.new # => -e:1:in `new': tried to create Proc object without a block (ArgumentError)
#@end
#@end

Proc.new は、Proc#initialize が定義されていれば
オブジェクトの初期化のためにこれを呼び出します。このことを
除けば、[[m:Kernel.#proc]] と同じです。

== Instance Methods

--- [](*arg) -> ()
--- call(*arg) -> ()
#@since 1.9.1
--- ===(*arg) -> ()
--- yield(*arg) -> ()
#@end

手続きオブジェクトを実行してその結果を返します。

#@since 1.9.1
引数の渡され方はオブジェクトの生成方法によって異なります。
詳しくは [[m:Proc#lambda?]] を参照してください。

「===」は when の所に手続きを渡せるようにするためのものです。

#@samplecode 例
def sign(n)
  case n
  when lambda{|n| n > 0} then 1
  when lambda{|n| n < 0} then -1
  else 0
  end
end

p sign(-4) #=> -1
p sign(0)  #=> 0
p sign(7)  #=> 1
#@end

また、以下のような syntactic sugar もあります。

#@samplecode 例
fib = lambda{|n|
  case n
  when 0 then 0
  when 1 then 1
  else
    fib.(n - 2) + fib.(n - 1)
  end
}
fib.(10) # => 55
#@end

#@else
引数はブロックパラメータにそのまま(多重代入のルールに従い)代入されます。
#@end


@param arg 手続きオブジェクトに与える引数を指定します。

@raise LocalJumpError Procを生成したメソッドからリターンしてしまった場合に発生します。

#@# 2.0 では削除されている事、実装に依存する内容である事から省略。
#@# 参照: プログラミング言語 Ruby p203
#@##until 2.0.0
#@#--- ==(other)   -> bool
#@##@since 1.9.1
#@#--- eql?(other) -> bool
#@##@end
#@#
#@# --- clone -> Proc
#@# nodoc
#@# --- dup -> Proc
#@# nodoc

#@since 2.6.0
--- <<(callable) -> Proc

self と引数を合成した Proc を返します。

戻り値の Proc は可変長の引数を受け取ります。
戻り値の Proc を呼び出すと、まず受け取った引数を callable に渡して呼び出し、
その戻り値を self に渡して呼び出した結果を返します。

[[m:Proc#>>]] とは呼び出しの順序が逆になります。

@param callable Proc、Method、もしくは任意の call メソッドを持ったオブジェクト。

#@samplecode 例
f = proc { |x| x * x }
g = proc { |x| x + x }

# (3 + 3) * (3 + 3)
p (f << g).call(3) # => 36
#@end

#@samplecode call を定義したオブジェクトを渡す例
class WordScanner
  def self.call(str)
    str.scan(/\w+/)
  end
end

File.write('testfile', <<~TEXT)
  Hello, World!
  Hello, Ruby!
TEXT

pipeline = proc { |data| puts "word count: #{data.size}" } << WordScanner << File.method(:read)
pipeline.call('testfile') # => word count: 4
#@end

@see [[m:Method#<<]], [[m:Method#>>]]

--- >>(callable) -> Proc

self と引数を合成した Proc を返します。

戻り値の Proc は可変長の引数を受け取ります。
戻り値の Proc を呼び出すと、まず受け取った引数を self に渡して呼び出し、
その戻り値を callable に渡して呼び出した結果を返します。

[[m:Proc#<<]] とは呼び出しの順序が逆になります。

@param callable Proc、Method、もしくは任意の call メソッドを持ったオブジェクト。

#@samplecode 例
f = proc { |x| x * x }
g = proc { |x| x + x }

# (3 * 3) + (3 * 3)
p (f >> g).call(3) # => 18
#@end

#@samplecode call を定義したオブジェクトを渡す例
class WordScanner
  def self.call(str)
    str.scan(/\w+/)
  end
end

File.write('testfile', <<~TEXT)
  Hello, World!
  Hello, Ruby!
TEXT

pipeline = proc { |fname| File.read(fname) } >> WordScanner >> method(:p)
pipeline.call('testfile') # => ["Hello", "World", "Hello", "Ruby"]
#@end

@see [[m:Method#<<]], [[m:Method#>>]]
#@end

--- arity -> Integer

Proc オブジェクトが受け付ける引数の数を返します。

ただし、可変長引数を受け付ける場合、負の整数

  -(必要とされる引数の数 + 1)

を返します。

#@samplecode 例
#@since 1.9.1
lambda{           }.arity   # => 0
lambda{||         }.arity   # =>  0
lambda{|x|        }.arity   # =>  1
lambda{|*x|       }.arity   # => -1
lambda{|x, y|     }.arity   # =>  2
lambda{|x, *y|    }.arity   # => -2
lambda{|(x, y)|   }.arity   # =>  1
lambda{|(x, y), z|}.arity   # =>  2
#@else
lambda{           }.arity   # => -1
lambda{||         }.arity   # =>  0
lambda{|x|        }.arity   # =>  1
lambda{|*x|       }.arity   # => -1
lambda{|x, y|     }.arity   # =>  2
lambda{|x, *y|    }.arity   # => -2
lambda{|(x, y)|   }.arity   # =>  2
lambda{|(x, y), z|}.arity   # =>  2
#@end
#@end

--- binding -> Binding

Proc オブジェクトが保持するコンテキストを 
[[c:Binding]] オブジェクトで返します。

#@samplecode 例
def fred(param)
  proc {}
end

sample_proc = fred(99)
eval("param", sample_proc.binding)   # => 99
#@end

--- to_proc -> self

self を返します。

#@samplecode 例
pr = proc {}
p pr == pr.to_proc # => true
#@end

--- to_s    -> String
#@since 2.0.0
--- inspect -> String
#@end

self の文字列表現を返します。

可能なら self を生成したソースファイル名、行番号を含みます。

#@samplecode 例
p Proc.new {
   true
}.to_s

# => "#<Proc:0x0x401a880c@-:3>"
#@end

#@since 1.9.1
--- curry         -> Proc
--- curry(arity)  -> Proc
Procをカリー化します

カリー化したProcはいくつかの引数をとります。十分な数の引数が与えられると、元のProcに引数を渡し
て実行し、結果を返します。引数の個数が足りないときは、部分適用したカリー化Procを返します。

@param arity 引数の個数を指定します
@return カリー化したProcオブジェクトを返します

#@samplecode 例
b = proc {|x, y, z| (x||0) + (y||0) + (z||0) }
p b.curry[1][2][3]           #=> 6
p b.curry[1, 2][3, 4]        #=> 6
p b.curry(5)[1][2][3][4][5]  #=> 6
p b.curry(5)[1, 2][3, 4][5]  #=> 6
p b.curry(1)[1]              #=> 1

b = proc {|x, y, z, *w| (x||0) + (y||0) + (z||0) + w.sum }
p b.curry[1][2][3]           #=> 6
p b.curry[1, 2][3, 4]        #=> 10
p b.curry(5)[1][2][3][4][5]  #=> 15
p b.curry(5)[1, 2][3, 4][5]  #=> 15
p b.curry(1)[1]              #=> 1

b = lambda {|x, y, z| (x||0) + (y||0) + (z||0) }
p b.curry[1][2][3]           #=> 6
p b.curry[1, 2][3, 4]        #=> wrong number of arguments (given 4, expected 3)
p b.curry(5)                 #=> wrong number of arguments (given 5, expected 3)
p b.curry(1)                 #=> wrong number of arguments (given 1, expected 3)

b = lambda {|x, y, z, *w| (x||0) + (y||0) + (z||0) + w.sum }
p b.curry[1][2][3]           #=> 6
p b.curry[1, 2][3, 4]        #=> 10
p b.curry(5)[1][2][3][4][5]  #=> 15
p b.curry(5)[1, 2][3, 4][5]  #=> 15
p b.curry(1)                 #=> wrong number of arguments (given 1, expected 3+)

b = proc { :foo }
p b.curry[]                  #=> :foo
#@end

--- lambda? -> bool
手続きオブジェクトの引数の取扱が厳密であるならば true を返します。


引数の取扱の厳密さの意味は以下の例を参考にしてください。

#@samplecode 例
# lambda で生成した Proc オブジェクトでは true 
lambda{}.lambda? # => true
# proc で生成した Proc オブジェクトでは false
proc{}.lambda?   # => false
# Proc.new で生成した Proc オブジェクトでは false
Proc.new{}.lambda? # => false

# 以下、lambda?が偽である場合
# 余分な引数を無視する
proc{|a,b| [a,b]}.call(1,2,3) # => [1,2]
# 足りない引数には nil が渡される
proc{|a,b| [a,b]}.call(1) # => [1, nil]
# 配列1つだと展開される
proc{|a,b| [a,b]}.call([1,2]) # => [1,2]
# lambdaの場合これらはすべて ArgumentError となる
 
# &が付いた仮引数で生成される Proc は lambda? が偽となる
def n(&b) b.lambda? end
n {} # => false

# &が付いた実引数によるものは、lambda?が元の Procオブジェクトから
# 引き継がれる
lambda(&lambda {}).lambda?   #=> true
proc(&lambda {}).lambda?     #=> true
Proc.new(&lambda {}).lambda? #=> true

lambda(&proc {}).lambda?     #=> false
proc(&proc {}).lambda?       #=> false
Proc.new(&proc {}).lambda?   #=> false

n(&lambda {})                #=> true
n(&proc {})                  #=> false
n(&Proc.new {})              #=> false

# Method#to_proc によるものは lambda?が真となる
def m() end
method(:m).to_proc.lambda? #=> true

# Module#define_method は特別扱いで、
# これで定義されたメソッドの引数は常に厳密に取り扱われる
class C
  define_method(:d) {}
end
C.new.d(1,2)       #=> ArgumentError
C.new.method(:d).to_proc.lambda?   #=> true

class C
  define_method(:e, &proc {})
end
C.new.e(1,2)       #=> ArgumentError
C.new.method(:e).to_proc.lambda?   #=> true
#@end

--- source_location -> [String, Integer] | nil
ソースコードのファイル名と行番号を配列で返します。

その手続オブジェクトが ruby で定義されていない(つまりネイティブ
である)場合は nil を返します。

#@until 1.9.2
[[m:Module.attr_reader]],
[[m:Module.attr_writer]],
[[m:Module.attr_accessor]] で定義されたメソッドには対応していません。
#@end

#@samplecode 例
# /path/to/target.rb を実行
proc {}.source_location            # => ["/path/to/target.rb", 1]
proc {}.source_location            # => ["/path/to/target.rb", 2]
(eval "proc {}").source_location   # => ["(eval)", 1]
method(:p).to_proc.source_location # => nil
#@end

@see [[m:Method#source_location]]

--- hash -> Integer

self のハッシュ値を返します。

#@#noexample

#@end

Proc オブジェクトの引数の情報を返します。

Proc オブジェクトが引数を取らなければ空の配列を返します。引数を取る場合は、配列の配列を返し、
各配列の要素は引数の種類に対応した以下のような Symbol と、引数名を表す Symbol の 2 要素です。

#@samplecode
prc = proc{|x, y=42, *other|}
p prc.parameters  # => [[:opt, :x], [:opt, :y], [:rest, :other]]
prc = lambda{|x, y=42, *other|}
p prc.parameters  # => [[:req, :x], [:opt, :y], [:rest, :other]]
prc = proc{|x, y=42, *other|}
p prc.parameters(lambda: true)  # => [[:req, :x], [:opt, :y], [:rest, :other]]
prc = lambda{|x, y=42, *other|}
p prc.parameters(lambda: false) # => [[:opt, :x], [:opt, :y], [:rest, :other]]
#@end
#@since 3.2
--- parameters(lambda: nil) -> [object]
#@else
--- parameters -> [object]
#@end
Proc オブジェクトの引数の情報を返します。

Proc オブジェクトが引数を取らなければ空の配列を返します。引数を取る場合は、配列の配列を返し、
各配列の要素は引数の種類に対応した以下のような Symbol と、引数名を表す Symbol の 2 要素です。

: :req
 必須の引数
: :opt
 デフォルト値が指定されたオプショナルな引数
: :rest
 * で指定された残りすべての引数
: :keyreq
 必須のキーワード引数
: :key
 デフォルト値が指定されたオプショナルなキーワード引数
: :keyrest
 ** で指定された残りのキーワード引数
: :block
 & で指定されたブロック引数

#@since 3.2
@param lambda true なら lambda として扱ったとき、false なら lambda ではない Proc として
              扱ったときの引数の情報を返します。
#@end

#@samplecode 例
prc = lambda{|x, y=42, *other, k_x:, k_y: 42, **k_other, &b|}
prc.parameters #=> [[:req, :x], [:opt, :y], [:rest, :other], [:keyreq, :k_x], [:key, :k_y], [:keyrest, :k_other], [:block, :b]]
#@end

#@since 3.2
#@samplecode lambda: の例
prc = proc{|x, y=42, *other|}
p prc.parameters  # => [[:opt, :x], [:opt, :y], [:rest, :other]]
prc = lambda{|x, y=42, *other|}
p prc.parameters  # => [[:req, :x], [:opt, :y], [:rest, :other]]
prc = proc{|x, y=42, *other|}
p prc.parameters(lambda: true)  # => [[:req, :x], [:opt, :y], [:rest, :other]]
prc = lambda{|x, y=42, *other|}
p prc.parameters(lambda: false) # => [[:opt, :x], [:opt, :y], [:rest, :other]]
#@end
#@end

@see [[m:Method#parameters]], [[m:UnboundMethod#parameters]]
#@since 2.7.0
--- ruby2_keywords -> proc

Marks the proc as passing keywords through a normal argument splat. This
should only be called on procs that accept an argument splat (`*args`)
but not explicit keywords or a keyword splat.  It marks the proc such
that if the proc is called with keyword arguments, the final hash
argument is marked with a special flag such that if it is the final
element of a normal argument splat to another method call, and that
method call does not include explicit keywords or a keyword splat, the
final element is interpreted as keywords.  In other words, keywords will
be passed through the proc to other methods.

This should only be used for procs that delegate keywords to another
method, and only for backwards compatibility with Ruby versions before
2.7.

This method will probably be removed at some point, as it exists only
for backwards compatibility. As it does not exist in Ruby versions
before 2.7, check that the proc responds to this method before calling
it. Also, be aware that if this method is removed, the behavior of the
proc will change so that it does not pass through keywords.

#@samplecode
module Mod
  foo = ->(meth, *args, &block) do
    send(:"do_#{meth}", *args, &block)
  end
  foo.ruby2_keywords if foo.respond_to?(:ruby2_keywords)
end
#@end
#@end
