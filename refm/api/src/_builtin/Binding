= class Binding < Object

ローカル変数のテーブルと self、モジュールのネストなどの情報を保
持するオブジェクトのクラスです。

組み込み関数 [[m:Kernel.#binding]] と [[m:Proc#binding]] によっ
てのみ生成され、[[m:Kernel.#eval]] の第 2 引数に使用します。
またトップレベルの Binding オブジェクトとして組み込み定数
[[m:Object::TOPLEVEL_BINDING]] が用意されています。

== Instance Methods

--- eval(expr, fname = __FILE__, lineno = 1)    -> object

自身をコンテキストとし文字列 expr を
Ruby プログラムとして評価しその結果を返します。
組み込み関数 [[m:Kernel.#eval]] を使って
eval(expr, self, fname, lineno) とするのと同じです。

@param expr  評価したい式を文字列で与えます。

@param fname ファイル名を文字列で与えます。式 expr が fname というファイル名にあるかのように実行されます。

@param lineno 行番号を整数で与えます。式 expr の先頭行の行番号が lineno であるかのように実行されます。

#@samplecode 例
def get_binding(str)
  binding
end
str = "hello"
p eval("str + ' Fred'")                      #=> "hello Fred"
p get_binding("bye").eval("str + ' Fred'")   #=> "bye Fred"
#@end

@see [[m:Kernel.#eval]]


#@since 2.1.0
--- local_variable_get(symbol) -> object

引数 symbol で指定した名前のローカル変数に設定された値を返します。

@param symbol ローカル変数名を [[c:Symbol]] オブジェクトで指定します。

@raise NameError 引数 symbol で指定したローカル変数が未定義の場合に発生します。

#@samplecode 例
def foo
  a = 1
  binding.local_variable_get(:a) # => 1
  binding.local_variable_get(:b) # => NameError
end
#@end

このメソッドは以下のコードの短縮形です。

#@samplecode
binding.eval("#{symbol}")
#@end

@see [[m:Binding#local_variable_set]], [[m:Binding#local_variable_defined?]]

--- local_variable_set(symbol, obj)

引数 symbol で指定した名前のローカル変数に引数 obj を設定します。

@param symbol ローカル変数名を [[c:Symbol]] オブジェクトで指定します。

@param obj 引数 symbol で指定したローカル変数に設定するオブジェクトを指定します。

#@samplecode 例
def foo
  a = 1
  bind = binding
  bind.local_variable_set(:a, 2) # set existing local variable `a'
  bind.local_variable_set(:b, 3) # create new local variable `b'
                                 # `b' exists only in binding
  p bind.local_variable_get(:a)  # => 2
  p bind.local_variable_get(:b)  # => 3
  p a                            # => 2
  p b                            # => NameError
end
#@end

このメソッドは以下のコード(ただし、obj が Ruby のコードで出力される場
合)と同様の動作をします。

#@samplecode
binding.eval("#{symbol} = #{obj}")
#@end

@see [[m:Binding#local_variable_get]], [[m:Binding#local_variable_defined?]]

--- local_variable_defined?(symbol) -> bool

引数 symbol で指定した名前のローカル変数が定義されている場合に true を、
そうでない場合に false を返します。

@param symbol ローカル変数名を [[c:Symbol]] オブジェクトで指定します。

#@samplecode 例
def foo
  a = 1
  binding.local_variable_defined?(:a) # => true
  binding.local_variable_defined?(:b) # => false
end
#@end

このメソッドは以下のコードの短縮形です。

#@samplecode
binding.eval("defined?(#{symbol}) == 'local-variable'")
#@end

@see [[m:Binding#local_variable_get]], [[m:Binding#local_variable_set]]
#@end

#@since 2.2.0
--- local_variables -> [Symbol]

ローカル変数の一覧を [[c:Symbol]] の配列で返します。

#@samplecode 例
def foo
  a = 1
  2.times do |n|
    binding.local_variables #=> [:a, :n]
  end
end
#@end

このメソッドは以下のコードと同様の動作をします。

#@samplecode
binding.eval("local_variables")
#@end

#@# #8779 を参照。
--- receiver -> object

保持するコンテキスト内での self を返します。

このメソッドは以下のコードと同様の動作をします。

#@samplecode
binding.eval("self")
#@end
#@end
#@since 2.4.0
--- irb -> object
REPLのセッションを開始します。

2.5.0 からは require 'irb' せずに直接 binding.irb を呼び出しても使えるようになりました。

@see [[lib:irb]]
#@end
#@since 2.6.0
--- source_location  -> [String, Integer]

self の Ruby のソースファイル名と行番号を返します。

[[ref:d:spec/variables#pseudo]] の __FILE__ と __LINE__ も参照してください。

#@samplecode 例
p binding.source_location # => ["test.rb", 1]
#@end
#@end
