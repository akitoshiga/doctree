= class Class < Module

クラスのクラスです。

より正確に言えば、個々のクラスはそれぞれメタクラスと呼
ばれる名前のないクラスをクラスとして持っていて、Class はそのメタ
クラスのクラスです。この関係は少し複雑ですが、Ruby を利用するにあたっ
ては特に重要ではありません。

クラスとモジュールには

  * クラスはインスタンスを作成できるが、モジュールはできない。
  * モジュールを他のモジュールやクラスにインクルードすることはできるが，クラスをインクルードすることはできない。

という違いがありますが、それ以外のほとんどの機能は [[c:Module]] から継
承されています。Module のメソッドのうち

  * [[m:Module#module_function]]
  * [[m:Module#extend_object]]
  * [[m:Module#append_features]]
#@since 2.0.0
  * [[m:Module#prepend_features]]
  * [[m:Module#refine]]
#@end

は Class では未定義にされています。

== Class Methods

--- new(superclass = Object)                -> Class
--- new(superclass = Object) {|klass| ... } -> Class

新しく名前の付いていない superclass のサブクラスを生成します。

名前のないクラスは、最初に名前を求める際に代入されている定数名を検
索し、見つかった定数名をクラス名とします。

#@samplecode 例
p foo = Class.new   # => #<Class:0x401b90f8>
p foo.name          # => nil
Foo = foo           # ここで p foo すれば "Foo" 固定
Bar = foo
p foo.name          # => "Bar"  ("Foo" になるか "Bar" になるかは不定)
#@end

ブロックが与えられた場合、生成したクラスを引数として
クラスのコンテキストでブロックを実行します。以下のコードと同じです。

#@samplecode 例
klass = Class.new(superclass)
klass.module_eval {|m|
  # ...
}
klass
#@end

この場合も生成したクラスを返します。
ブロックの実行は Class#initialize が行います。

@param superclass 生成するクラスのスーパークラスを指定します。

#@samplecode 例
k = Class.new{|c|
  def initialize
    p "in initialize"
  end

  def hoge
    p "hoge hoge hoge"
  end
}
o = k.new              #=> "in initialize"
o.hoge                 #=> "hoge hoge hoge"
#@end

== Instance Methods

--- allocate    -> object

自身のインスタンスを生成して返します。生成したオブジェクトは
自身のインスタンスであること以外には何も特性を持ちません。

#@samplecode 例
klass = Class.new do
  def initialize(*args)
    @initialized = true
  end

  def initialized?
    @initialized || false
  end
end

klass.allocate.initialized? #=> false
#@end


--- new(*args, &block)    -> object

自身のインスタンスを生成して返します。
このメソッドの引数はブロック引数も含め [[m:Object#initialize]] に渡されます。

new は [[m:Class#allocate]] でインスタンスを生成し、
[[m:Object#initialize]] で初期化を行います。

@param args [[m:Object#initialize]] に渡される引数を指定します。

@param block [[m:Object#initialize]] に渡されるブロックを指定します。

#@samplecode 例
# [[c:Class]] クラスのインスタンス、C クラスを生成
C = Class.new   # => C

# [[c:Class]] クラスのインスタンス、C クラスのインスタンスを生成
C.new           # => #<C:0x00005623f8b4e458>
#@end

#@since 3.1
--- subclasses    -> [Class]

自身が直接のスーパークラスになっている(特異クラスを除く)クラスの配列を返します。
返り値の配列の順序は未定義です。

#@samplecode 例
class A; end
class B < A; end
class C < B; end
class D < A; end

A.subclasses        # => [D, B]
B.subclasses        # => [C]
C.subclasses        # => []
#@end

@see [[m:Class#superclass]]
#@end
--- superclass    -> Class | nil

自身のスーパークラスを返します。

#@samplecode 例
File.superclass          #=> IO
IO.superclass            #=> Object
class Foo; end
class Bar < Foo; end
Bar.superclass           #=> Foo
Object.superclass        #=> BasicObject
#@end

ただし [[c:BasicObject]].superclass は nil を返します。

#@samplecode 例
BasicObject.superclass   #=> nil
#@end

#@since 3.1
@see [[m:Class#subclasses]]
#@end
--- _load(str)    -> Class

[[m:Object#_dump]] を参照して下さい。

@param str Ruby のオブジェクトがダンプされた文字列を指定します。

== Private Instance Methods

--- inherited(subclass)     -> ()

クラスのサブクラスが定義された時、新しく生成されたサブクラスを引数
にインタプリタから呼び出されます。このメソッドが呼ばれるタイミングは
クラス定義文の実行直前です。

@param subclass プログラム内で新たに定義された自身のサブクラスです。

#@samplecode 例
class Foo
  def Foo.inherited(subclass)
    puts "class \"#{self}\" was inherited by \"#{subclass}\""
  end
end
class Bar < Foo
  puts "executing class body"
end

# => class "Foo" was inherited by "Bar"
#    executing class body
#@end
